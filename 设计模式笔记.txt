设计模式笔记：
	1.创建型模式：
				1.工厂模式（Factory Pattern）
				2.抽象工厂模式（Abstract Factory Pattern）:提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类
				3.单例模式（Singleton Pattern）：
					建议：
						一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。
						只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。
						如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。
						如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。
							1.懒汉式，线程不安全（因为没有加锁，所以严格意义上不算单例模式）：
								public class Singleton{
									private static instance;
									private Singleton(){}
									public static Singleton getInstance(){
										if(instance==null){
											instance=new Singleton();
										}
										return instance;
									}
								}
							2.懒汉式，线程安全(但是效率很低)：
								public class Singleton{
									private static instance;
									private Singleton(){}

									public static synchronized Singleton getInstance(){
										if(instance==null){
											instance=new Singleton();
										}
										return instance;
									}

								}
							3.饿汉式（容易产生垃圾）
								public class Singleton{
									private static Singleton instance =new Singleton();
									private Singleton(){}

									public static Singleton getInstance(){
										return instance;
									}
								}
							4.双检索/双重校验锁（DCL-实现难度较复杂但能够在线程安全的情况下保持效率）
								public class Singleton{
									private volatile static Singleton singleton;
									private Singleton(){}
									public static Singleton getInstance(){
										if(singleton==null){
											synchronized (Singleton.class){
												if(singleton==null){
													singleton=new Singleton();
												}
											}
										}
										return singleton;
									}
								}
							5.登记式/静态内部类（达到和双检索一样的效果，但是实现更加简单）-只适用于静态域
								public class Singleton{
									private static class SingletonHolder{
										private static final Singleton instance =new Singleton();
									}
									private Singleton(){}
									public static final Singleton getInstance(){
										return SingletonHolder.instance;
									}
								}
							6.枚举（实现单例模式的最佳方法）
								public enum Singleton{
									instance;
									public void whateverMethod(){

									}
								}


				4.建造者模式(Builder Pattern)：使用多个简单对象一步一步构建成一个复杂的对象
									 注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。
				5.原型模式(Prototype Pattern)：用于创建重复的对象：
							实现方法：实现一个原型接口，用于创建当前对象的克隆。当创建对象的代价比较大的时候采用这种模式。

	2.结构型模式：
				1.适配器模式(Adapter Pattern)：用作两个不兼容的接口之间的桥梁
							1.解决方案：继承或依赖
							2.优点：
									1.可以让任意两个没有关联的类链接到一起
									2.提高了类的复用
									3.增加了累的透明度
									4.灵活性好
							3.缺点：
									1.过多的使用适配器会让系统杂乱
									2.JAVA最多只能继承一个类，因此至多只能适配一个类						

				2.桥接模式(Bridge Pattern)
					1、意图：将抽象部分与实现部分解耦
					2、主要解决继承造成类爆炸的问题
					3、优点：抽象和实现的分离；优秀个扩展能力；实现细节对客户透明；
					4、缺点：增加系统的理解和设计难度
				3.过滤器模式(Filter Pattern)：这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来
				4.组合模式(Composite Pattern)
				5.装饰模式(Decorator Pattern)
				6.外观模式(Facade Pattern)
				7.享元模式(Flyweight Pattern)
				8.代理模式(Proxy Pattern)
	3.行为型模式：
				1.责任链模式(Chain of Responsibility)
				2.命令模式(Command)
				3.解释器模式(Interpreter)
				4.迭代器模式（Iterator Pattern）
				5.中介者模式（Mediator Pattern）
				6.备忘录模式（Memento Pattern）
				7.观察者模式（Observer Pattern）
				8.状态模式（State Pattern）
				9.空对象模式（Null Object Pattern）
				10.策略模式（Strategy Pattern）
				11.模板模式（Template Pattern）
				12.访问者模式（Visitor Patter）
	4.J2EE模式：
				1.MVC 模式（MVC Pattern）
				2.业务代表模式（Business Delegate Pattern）
				3.组合实体模式（Composite Entity Pattern）
				4.数据访问对象模式（Data Access Object Pattern）
				5.前端控制器模式（Front Controller Pattern）
				6.拦截过滤器模式（Intercepting Filter Pattern）
				7.服务定位器模式（Service Locator Pattern）
				8.传输对象模式（Transfer Object Patter)

设计模式6大原则：
				1.开闭原则（扩展开放性，修改闭合性）
				2.里氏代换原则：基类出现的地方，子类一定可以出现
				3.依赖倒转原则：针对接口，依赖抽象而不依赖具体
				4.接口隔离原则：降低类之间的耦合度
				5.迪米特法则（最少知道原则）：一个实体尽量减少与其他实体之间发生相互作用
				6.合成复用原则：尽量使用合成/聚合的方法而不是继承